#include "colormap.h"

void
ColorMap::
setColorMap(Type t)
{
  switch(t){
  case SEASHORE:
      m_map.resize(7, 3);
      m_map.setZero();
      m_map <<
               0.176, 0.192, 0.518,
               0.000, 0.463, 0.631,
               0.196, 0.667, 0.710,
               0.467, 0.812, 0.745,
               0.702, 0.906, 0.773,
               0.875, 0.945, 0.816,
               0.953, 0.945, 0.894;
    break;

  case BLACKBODY:
    m_map.resize(32, 3);
    m_map.setZero();
    m_map <<
             0.0,0.0,0.0,
             0.0857913205762,0.0309874526184,0.0173328711915,
             0.133174636606,0.0588688899571,0.0346802666087,
             0.180001956037,0.0730689545154,0.0515393237212,
             0.22981556179,0.0840603593119,0.0647813713857,
             0.281397607223,0.093912584278,0.075408501413,
             0.334521638801,0.102639499627,0.0842454688083,
             0.388957802186,0.110254429637,0.0927990674821,
             0.444611925648,0.116732501721,0.101402659637,
             0.501422312285,0.122025816585,0.110058408122,
             0.559331322331,0.126067584009,0.118767796491,
             0.618285970576,0.128767919785,0.127531801155,
             0.678237857955,0.130007052818,0.136351016263,
             0.712849583079,0.181721849923,0.13081678256,
             0.743632057947,0.232649759358,0.120991817028,
             0.774324938583,0.279315911516,0.108089917959,
             0.804936242903,0.323627020047,0.0907961686083,
             0.835473266757,0.366524681419,0.0662363460741,
             0.865942668698,0.408541395043,0.026029485466,
             0.876634426153,0.46401951695,0.0173065426095,
             0.883455346031,0.518983528803,0.0149628730405,
             0.88905246237,0.572164381169,0.013499801006,
             0.893375939063,0.624108797455,0.0130334871745,
             0.89637036663,0.675180034619,0.013680092215,
             0.897973818846,0.725630730259,0.015555776796,
             0.898116710502,0.775642817733,0.0187767015864,
             0.896720396485,0.825350944866,0.023459027255,
             0.927670131094,0.859991226192,0.319086199143,
             0.956158602738,0.893933112845,0.503316730316,
             0.97827065392,0.92856476667,0.671307024002,
             0.993196411712,0.963913323002,0.83560909192,
             1.0,1.0,1.0;
    break;

  case GREY:
  default:
      m_map.resize(2, 3);
      m_map.setZero();
      m_map << 0., 0., 0.,
               1., 1., 1.;
    break;
  }
}

void
ColorMap::
compute_colors(const VectorXd &data, MatrixXd &colors, double min, double max) const
{
    colors.resize(data.size(), 3);
    colors.setZero();

    for(unsigned int i=0; i<data.size(); ++i){
        double value = (data(i)-min)/(max-min);
               value = std::min( std::max( value, 0.), 1. );
        colors.row(i) = get_pixel_value(value);
    }
}

Eigen::Vector3d
ColorMap::
get_pixel_value(double value) const
{
   int n    = getMapSize();
   double w = 1./double(n);

    int cid = std::floor(value * (n-1));
    if(cid==n-1)
        return m_map.row(cid);

    double alpha = value * (n-1) - double(cid);//(value - double(cid)*w) / w;

    return (1.-alpha)*m_map.row(cid) + (alpha)*m_map.row(cid+1);
}
